name: Pull Request
on:
  pull_request:
    types: [opened, reopened, synchronize]
permissions:
  contents: read
  pull-requests: write
env:
  APP_NAME: tst-nodejs-demo
  IMAGE: tst-nodejs-demo
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_ACR_NAME: ${{ vars.AZURE_ACR_NAME }}

  BASE_ENVIRONMENT: 'development'
  ENVIRONMENT_TYPE: 'development'
  HUMCTL_VERSION: '*'
  ENVIRONMENT_ID: pr-${{ github.event.number }}
  ENVIRONMENT_NAME: PR-${{ github.event.number }}


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: humanitec/setup-cli-action@v1
        with:
          version: ${{ env.HUMCTL_VERSION }}
      - name: humctl score validate - backstage
        run: |
          humctl score validate \
            --token ${{ secrets.HUMANITEC_TOKEN }} \
            --org ${{ vars.HUMANITEC_ORG_ID }} \
            --strict \
            --extensions humanitec.score.yaml \
            score.yaml
      - name: install score-compose
        uses: score-spec/setup-score@v3
        with:
          file: score-compose
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "latest"
      - name: make compose-up
        run: |
          make compose-up
      - name: make compose-test
        run: |
          make compose-test
      - name: install score-k8s
        uses: score-spec/setup-score@v3
        with:
          file: score-k8s
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "latest"
      - name: make k8s-up
        run: |
          make kind-create-cluster
          make kind-load-image
          make k8s-up
      - name: make k8s-test
        run: |
          make k8s-test
      - name: Create Humanitec Env
        run: |
          humctl create environment ${{ env.ENVIRONMENT_ID }} \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --name ${{ env.ENVIRONMENT_NAME }} \
              -t ${{ env.ENVIRONMENT_TYPE }} \
              --from ${{ env.BASE_ENVIRONMENT }} \
              || true
      - name: Set Tag with SHA
        run: echo "TAG=`echo $GITHUB_SHA | cut -c 1-7`" >> $GITHUB_ENV

      - name: configure azure credentials
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: login to azure acr
        run: |
          az acr login -n ${{ env.AZURE_ACR_NAME }}
          echo "CONTAINER_REGISTRY=${{ env.AZURE_ACR_NAME }}.azurecr.io" >> "$GITHUB_ENV"


      - run: docker build --platform linux/amd64 . -t $CONTAINER_REGISTRY/$IMAGE:$TAG
      - run: docker push $CONTAINER_REGISTRY/$IMAGE:$TAG

      - name: Deploy Score
        run: |
          humctl score deploy \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} \
              -f score.yaml \
              --extensions humanitec.score.yaml \
              --workload-source-url "https://github.com/${{ github.repository }}/blob/${{ github.head_ref }}/score.yaml" \
              --image $CONTAINER_REGISTRY/$IMAGE:$TAG \
              --message "$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${{ github.event.pull_request.commits_url }}?per_page=10" | jq -r .[-1].commit.message)" \
              --wait
      - name: Build Comment Message
        if: ${{ always() }}
        run: |
          DEPLOYMENT_ID=$(humctl get deployment . -o json \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID}} \
              --app ${{ env.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} \
              | jq -r .metadata.id)
          ENV_URL="https://app.humanitec.io/orgs/"${{ vars.HUMANITEC_ORG_ID }}"/apps/"${{ env.APP_NAME }}"/envs/"${{ env.ENVIRONMENT_ID }}"/deploys/"${DEPLOYMENT_ID}
          GRAPH_URL="https://app.humanitec.io/orgs/"${{ vars.HUMANITEC_ORG_ID }}"/apps/"${{ env.APP_NAME }}"/envs/"${{ env.ENVIRONMENT_ID }}"/resource-graph/"${DEPLOYMENT_ID}
          DOMAINS=$(humctl get active-resources \
                      --token ${{ secrets.HUMANITEC_TOKEN }} \
                      --org ${{ vars.HUMANITEC_ORG_ID }} \
                      --app ${{ env.APP_NAME }} \
                      --env ${{ env.ENVIRONMENT_ID }} -o json \
                      | jq -r '. | map(. | select(.metadata.type == "dns")) | map(":link: " + (.metadata.res_id | split(".") | .[1]) + ": [" + .status.resource.host + "](https://" + .status.resource.host + ")") | join("\n")')

          DEPLOYMENT_ERRORS=$(humctl get deployment-error \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} -o json)
          
          echo "#### :white_check_mark: Successfully deployed with score-compose" >> pr_message.txt
          echo "" >> pr_message.txt
          echo "#### :white_check_mark: Successfully deployed with score-k8s" >> pr_message.txt
          echo "" >> pr_message.txt
          
          if [ "$DEPLOYMENT_ERRORS" = "[]" ]; then
            echo "## Deployment successfully completed for ${{ env.ENVIRONMENT_NAME }}! :tada:" >> pr_message.txt
            echo "" >> pr_message.txt
            echo "#### :white_check_mark: Successfully deployed with humctl" >> pr_message.txt
            echo "" >> pr_message.txt
          else
            echo "## Deployment failed for ${{ env.ENVIRONMENT_NAME }}! :x:" >> pr_message.txt
            echo "" >> pr_message.txt
            echo "### Errors:" >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```json' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "$DEPLOYMENT_ERRORS" | jq .[0].status.message -r >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "<details><summary>Errors details</summary>" >> pr_message.txt
            echo "" >> pr_message.txt
            echo "### Errors details:" >> pr_message.txt
            echo '```json' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "$DEPLOYMENT_ERRORS" >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "</details>" >> pr_message.txt
            echo "" >> pr_message.txt
          fi

          echo "### :arrow_right: [Open Resource Graph]($GRAPH_URL)" >> pr_message.txt
          echo "### :mag: [View Deployment in Humanitec]($ENV_URL)" >> pr_message.txt
          
          echo "" >> pr_message.txt
          echo "$DOMAINS" >> pr_message.txt
          echo "" >> pr_message.txt

          echo "<details><summary>Deployment diff</summary>" >> pr_message.txt
          echo "" >> pr_message.txt
          echo "### Deployment diff:" >> pr_message.txt
          echo '```json' >> pr_message.txt
          echo "" >> pr_message.txt
          humctl diff sets env/${{ env.ENVIRONMENT_ID }} env/${{ env.BASE_ENVIRONMENT }} \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} -o json >> pr_message.txt
          echo "" >> pr_message.txt
          echo '```' >> pr_message.txt
          echo "" >> pr_message.txt
          echo "</details>" >> pr_message.txt

          if [ "$DEPLOYMENT_ERRORS" = "[]" ]; then
            echo "<details><summary>Active Resources Usage</summary>" >> pr_message.txt
            echo "" >> pr_message.txt
            echo "### Active Resources Usage:" >> pr_message.txt
            echo '```none' >> pr_message.txt
            echo "" >> pr_message.txt
            humctl resources active-resource-usage \
                --env ${{ env.ENVIRONMENT_ID }} \
                --token ${{ secrets.HUMANITEC_TOKEN }} \
                --org ${{ vars.HUMANITEC_ORG_ID }} \
                --app ${{ env.APP_NAME }} >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "</details>" >> pr_message.txt
          fi

          cat pr_message.txt
      - name: Comment PR
        if: ${{ always() }}
        run: |
          gh pr comment ${{ github.event.number }} --repo ${{ github.repository }} --body-file pr_message.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


